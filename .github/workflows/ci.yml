name: Node.js CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Debug Node 18 environment (diagnostics)
        if: matrix.node-version == '18.x'
        continue-on-error: true
        env:
          NODE_OPTIONS: "--experimental-vm-modules --enable-source-maps"
        run: |
          echo "--- node / npm versions ---"
          node --version
          npm --version
          echo "--- node exec args ---"
          node -p "process.execArgv.join(' ')"
          echo "--- env NODE_OPTIONS ---"
          echo "$NODE_OPTIONS"
          echo "--- workspace files ---"
          ls -la
          echo "--- .nyc_output (if any) ---"
          ls -la .nyc_output || true
          echo "--- coverage (if any) ---"
          ls -la coverage || true

      - name: Run tests with coverage
        run: npm run coverage
        env:
          # Enable vm modules and source-map support so coverage tools can handle ESM on Node 18
          NODE_OPTIONS: "--experimental-vm-modules --enable-source-maps"
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.node-version }}
          path: |
            coverage/
            .nyc_output/
          retention-days: 7

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: vercel deploy --prod --token=$VERCEL_TOKEN --yes